"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BigIntLiteral = BigIntLiteral;
exports.BooleanLiteral = BooleanLiteral;
exports.NullLiteral = NullLiteral;
exports.NumericLiteral = NumericLiteral;
exports.RegExpLiteral = RegExpLiteral;
exports.StringLiteral = StringLiteral;

var _detachedNode = require("../../detachedNode");

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
function BigIntLiteral(props) {
  var _props$raw;

  return (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Literal',
    value: props.value,
    raw: (_props$raw = props.raw) != null ? _props$raw : `${props.value}n`,
    bigint: `${props.value}`
  });
}

function BooleanLiteral(props) {
  return (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Literal',
    raw: props.value ? 'true' : 'false',
    value: props.value
  });
}

function NumericLiteral(props) {
  var _props$raw2;

  return (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Literal',
    value: props.value,
    raw: (_props$raw2 = props.raw) != null ? _props$raw2 : `${props.value}`
  });
}

function NullLiteral(props = { ...null
}) {
  return (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Literal',
    value: null,
    raw: 'null'
  });
} // pattern/flags are on a subobject in the estree spec, but are flat on the hermes types
// also the value is supposed to be a RegExp instance


function RegExpLiteral(props) {
  const value = new RegExp(props.pattern, props.flags);
  return (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Literal',
    value,
    raw: value.toString(),
    regex: {
      pattern: props.pattern,
      flags: props.flags
    }
  });
}

function StringLiteral(props) {
  const hasSingleQuote = props.value.includes('"');
  const hasDoubleQuote = props.value.includes("'");
  let raw = props.raw;

  if (raw == null) {
    if (hasSingleQuote && hasDoubleQuote) {
      raw = `'${props.value.replace(/'/g, "\\'")}'`;
    } else if (hasSingleQuote) {
      raw = `"${props.value}"`;
    } else {
      raw = `'${props.value}'`;
    }
  }

  return (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Literal',
    raw,
    value: props.value
  });
}