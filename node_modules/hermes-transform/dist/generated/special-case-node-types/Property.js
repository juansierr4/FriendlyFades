"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DestructuringObjectProperty = DestructuringObjectProperty;
exports.DestructuringObjectPropertyWithComputedName = DestructuringObjectPropertyWithComputedName;
exports.DestructuringObjectPropertyWithNonShorthandStaticName = DestructuringObjectPropertyWithNonShorthandStaticName;
exports.DestructuringObjectPropertyWithShorthandStaticName = DestructuringObjectPropertyWithShorthandStaticName;
exports.ObjectProperty = ObjectProperty;
exports.ObjectPropertyWithComputedName = ObjectPropertyWithComputedName;
exports.ObjectPropertyWithNonShorthandStaticName = ObjectPropertyWithNonShorthandStaticName;
exports.ObjectPropertyWithShorthandStaticName = ObjectPropertyWithShorthandStaticName;

var _detachedNode = require("../../detachedNode");

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
function DestructuringObjectProperty(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    kind: 'init',
    method: false,
    key: (0, _detachedNode.asDetachedNode)(props.key),
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: props.computed,
    shorthand: props.shorthand
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function DestructuringObjectPropertyWithNonShorthandStaticName(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    kind: 'init',
    method: false,
    key: (0, _detachedNode.asDetachedNode)(props.key),
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: false,
    shorthand: false
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function DestructuringObjectPropertyWithShorthandStaticName(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    kind: 'init',
    method: false,
    key: (0, _detachedNode.asDetachedNode)(props.key),
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: false,
    shorthand: true
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function DestructuringObjectPropertyWithComputedName(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    kind: 'init',
    method: false,
    key: (0, _detachedNode.asDetachedNode)(props.key),
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: true,
    shorthand: false
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function ObjectProperty(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    key: (0, _detachedNode.asDetachedNode)(props.key),
    kind: props.kind,
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: props.computed,
    method: props.method,
    shorthand: props.shorthand
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function ObjectPropertyWithNonShorthandStaticName(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    key: (0, _detachedNode.asDetachedNode)(props.key),
    kind: props.kind,
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: false,
    method: props.method,
    shorthand: false
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function ObjectPropertyWithShorthandStaticName(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    key: (0, _detachedNode.asDetachedNode)(props.key),
    kind: 'init',
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: false,
    method: false,
    shorthand: true
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}

function ObjectPropertyWithComputedName(props) {
  const node = (0, _detachedNode.detachedProps)(props.parent, {
    type: 'Property',
    key: (0, _detachedNode.asDetachedNode)(props.key),
    kind: props.kind,
    value: (0, _detachedNode.asDetachedNode)(props.value),
    computed: true,
    method: props.method,
    shorthand: false
  });
  (0, _detachedNode.setParentPointersInDirectChildren)(node);
  return node;
}