/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traverseWithContext = exports.traverse = exports.transform = exports.t = exports.print = exports.parse = exports.makeCommentOwnLine = exports.cloneJSDocCommentsToNewNode = exports.asDetachedNode = exports.SimpleTraverser = void 0;

var _hermesParser = require("hermes-parser");

exports.SimpleTraverser = _hermesParser.SimpleTraverser;

var _traverse = require("./traverse/traverse");

exports.traverse = _traverse.traverse;
exports.traverseWithContext = _traverse.traverseWithContext;

var _transform = require("./transform/transform");

exports.transform = _transform.transform;

var _parse = require("./transform/parse");

exports.parse = _parse.parse;

var _print = require("./transform/print");

exports.print = _print.print;

var _t = _interopRequireWildcard(require("./generated/node-types"));

exports.t = _t;

var _detachedNode = require("./detachedNode");

exports.asDetachedNode = _detachedNode.asDetachedNode;

var _comments = require("./transform/comments/comments");

exports.cloneJSDocCommentsToNewNode = _comments.cloneJSDocCommentsToNewNode;
exports.makeCommentOwnLine = _comments.makeCommentOwnLine;

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }