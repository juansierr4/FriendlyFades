"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createRemoveStatementMutation = createRemoveStatementMutation;
exports.performRemoveStatementMutation = performRemoveStatementMutation;

var _hermesParser = require("hermes-parser");

var _getStatementParent = require("./utils/getStatementParent");

var t = _interopRequireWildcard(require("../../generated/node-types"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
function createRemoveStatementMutation(node) {
  return {
    type: 'removeStatement',
    node
  };
}

function performRemoveStatementMutation(mutationContext, mutation) {
  const removalParent = (0, _getStatementParent.getStatementParent)(mutation.node);
  mutationContext.markDeletion(mutation.node);
  mutationContext.markMutation(removalParent.parent, removalParent.key);

  if (removalParent.type === 'array') {
    const parent = removalParent.parent;
    parent[removalParent.key] = _hermesParser.astArrayMutationHelpers.removeFromArray(parent[removalParent.key], removalParent.targetIndex);
  } else {
    // The parent has a 1:1 relationship on this key, so we can't just
    // remove the node. Instead we replace it with an empty block statement.
    // We COULD throw an error here and make the codemodder write a stricter
    // codemod - but we decided to add this bit of magic to make it easier
    // to write codemods.
    // Worst case it creates some dead code that can be easily detected
    // and cleaned up later.
    const blockStatement = t.BlockStatement({
      body: [],
      parent: removalParent.parent
    });
    removalParent.parent[removalParent.key] = blockStatement;
  }

  return removalParent.parent;
}