/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.print = print;

var _hermesParser = require("hermes-parser");

var prettier = _interopRequireWildcard(require("prettier"));

var _comments = require("./comments/comments");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

let cache = 1;
const cacheBase = Math.random();

async function print(ast, originalCode, prettierOptions = {}, visitorKeys) {
  // $FlowExpectedError[incompatible-type] This is now safe to access.
  const program = ast; // The docblock comment is never attached to any AST nodes, since its technically
  // attached to the program. However this is specific to our AST and in order for
  // prettier to correctly print it we need to attach it to the first node in the
  // program body.

  if (program.docblock != null && program.body.length > 0) {
    const firstNode = program.body[0];
    const docblockComment = program.docblock.comment;
    const leadingComments = (0, _comments.getLeadingCommentsForNode)(firstNode);

    if (!leadingComments.includes(docblockComment)) {
      (0, _comments.addCommentsToNode)(firstNode, [docblockComment], 'leading');
    }
  } // Fix up the AST to match what prettier expects.


  (0, _hermesParser.mutateESTreeASTForPrettier)(program, visitorKeys); // we need to delete the comments prop or else prettier will do
  // its own attachment pass after the mutation and duplicate the
  // comments on each node, borking the output
  // $FlowExpectedError[cannot-write]

  delete program.comments;

  switch (getPrettierMajorVersion()) {
    case '3':
      {
        // Lazy require this module as it only exists in prettier v3.
        const prettierFlowPlugin = require('prettier/plugins/flow');

        return prettier.format(originalCode, // $FlowExpectedError[incompatible-exact] - we don't want to create a dependency on the prettier types
        { ...prettierOptions,
          parser: 'flow',
          requirePragma: false,
          plugins: [{
            parsers: {
              flow: { ...prettierFlowPlugin.parsers.flow,

                parse() {
                  return program;
                }

              }
            }
          }]
        });
      }

    case '2':
      {
        var _hermesPlugin$parsers;

        const hermesPlugin = require('prettier-plugin-hermes-parser');

        const hermesParser = (_hermesPlugin$parsers = hermesPlugin.parsers) == null ? void 0 : _hermesPlugin$parsers.hermes;

        if (hermesParser == null) {
          throw new Error('Hermes parser plugin not found');
        }

        return prettier.format(originalCode, // $FlowExpectedError[incompatible-exact] - we don't want to create a dependency on the prettier types
        { ...prettierOptions,
          parser: 'hermes',
          requirePragma: false,
          plugins: [// $FlowExpectedError[incompatible-call] Cache value is not expected but needed in this case.
          {
            parsers: {
              hermes: { ...hermesParser,
                // Prettier caches the plugin, by making this key always unique we ensure the new `parse`
                // function with the correct AST is always called.
                cache: `${cacheBase}-${cache++}`,

                // Provide the passed AST to prettier
                parse() {
                  return program;
                }

              }
            },
            printers: hermesPlugin.printers
          }]
        });
      }

    case 'UNSUPPORTED':
    default:
      {
        throw new Error(`Unknown or unsupported prettier version of "${prettier.version}". Only major versions 3 or 2 of prettier are supported.`);
      }
  }
}

function getPrettierMajorVersion() {
  const {
    version
  } = prettier;

  if (version.startsWith('3.')) {
    return '3';
  }

  if (version.startsWith('2.')) {
    return '2';
  }

  return 'UNSUPPORTED';
}