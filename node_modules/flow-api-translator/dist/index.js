/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.translateFlowDefToTSDef = translateFlowDefToTSDef;
exports.translateFlowImportsTo = translateFlowImportsTo;
exports.translateFlowToFlowDef = translateFlowToFlowDef;
exports.translateFlowToJS = translateFlowToJS;
exports.translateFlowToTSDef = translateFlowToTSDef;

var _hermesTransform = require("hermes-transform");

var _visitorKeys = require("@typescript-eslint/visitor-keys");

var _flowToFlowDef = _interopRequireDefault(require("./flowToFlowDef"));

var _flowDefToTSDef = require("./flowDefToTSDef");

var _flowToJS = require("./flowToJS");

var _flowImportTo = require("./flowImportTo");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

async function translateFlowToFlowDef(code, prettierOptions = {}) {
  const {
    ast,
    scopeManager
  } = await (0, _hermesTransform.parse)(code);
  const [flowDefAst, mutatedCode] = (0, _flowToFlowDef.default)(ast, code, scopeManager, {
    recoverFromErrors: true
  });
  return (0, _hermesTransform.print)(flowDefAst, mutatedCode, prettierOptions);
}

async function translateFlowToTSDef(code, prettierOptions = {}) {
  const flowDefCode = await translateFlowToFlowDef(code, prettierOptions);
  return translateFlowDefToTSDef(flowDefCode, prettierOptions);
}

async function translateFlowDefToTSDef(code, prettierOptions = {}) {
  const {
    ast,
    scopeManager
  } = await (0, _hermesTransform.parse)(code);
  const [tsAST, mutatedCode] = (0, _flowDefToTSDef.flowDefToTSDef)(code, ast, scopeManager, {
    recoverFromErrors: true
  });
  return (0, _hermesTransform.print)( // $FlowExpectedError[incompatible-call] - this is fine as we're providing the visitor keys
  tsAST, mutatedCode, { ...prettierOptions
  }, _visitorKeys.visitorKeys);
}

async function translateFlowToJS(code, prettierOptions = {}) {
  const {
    ast,
    scopeManager
  } = await (0, _hermesTransform.parse)(code);
  const jsAST = (0, _flowToJS.flowToJS)(ast, code, scopeManager);
  return (0, _hermesTransform.print)(jsAST, code, prettierOptions);
}

async function translateFlowImportsTo(code, prettierOptions = {}, opts) {
  const {
    ast,
    scopeManager
  } = await (0, _hermesTransform.parse)(code);
  const jsAST = (0, _flowImportTo.flowImportTo)(ast, code, scopeManager, opts);
  return (0, _hermesTransform.print)(jsAST, code, prettierOptions);
}