import { ESLintUtils } from "@typescript-eslint/utils";
import * as ts from "typescript";
export declare const createRule: <TOptions extends readonly unknown[], TMessageIds extends string, TRuleListener extends import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener = import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleListener>({ name, meta, ...rule }: Readonly<ESLintUtils.RuleWithMetaAndName<TOptions, TMessageIds, TRuleListener>>) => import("@typescript-eslint/utils/dist/ts-eslint/Rule").RuleModule<TMessageIds, TOptions, TRuleListener>;
export declare function readJson(path: string): Promise<any>;
export declare function failure(ruleName: string, s: string): string;
export declare function getCommonDirectoryName(files: readonly string[]): string;
export declare function eachModuleStatement(sourceFile: ts.SourceFile, action: (statement: ts.Statement) => void): void;
export declare function getModuleDeclarationStatements(node: ts.ModuleDeclaration): readonly ts.Statement[] | undefined;
export declare function getCompilerOptions(dirPath: string): Promise<ts.CompilerOptions>;
export declare function withoutPrefix(s: string, prefix: string): string | undefined;
export declare function last<T>(a: readonly T[]): T;
export declare function assertDefined<T>(a: T | undefined): T;
export declare function mapDefinedAsync<T, U>(arr: Iterable<T>, mapper: (t: T) => Promise<U | undefined>): Promise<U[]>;
export declare function isMainFile(fileName: string, allowNested: boolean): boolean;
