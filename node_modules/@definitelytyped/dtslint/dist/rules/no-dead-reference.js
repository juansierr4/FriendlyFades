"use strict";
const util_1 = require("../util");
const rule = (0, util_1.createRule)({
    name: "no-dead-reference",
    defaultOptions: [],
    meta: {
        type: "problem",
        docs: {
            description: "Ensures that all `/// <reference>` comments go at the top of the file.",
            recommended: "error",
        },
        messages: {
            referenceAtTop: "`/// <reference>` directive must be at top of file to take effect.",
        },
        schema: [],
    },
    create(context) {
        var _a, _b;
        const source = context.getSourceCode();
        if (source.ast.body.length) {
            // 'm' flag makes it multiline, so `^` matches the beginning of any line.
            // 'g' flag lets us set rgx.lastIndex
            const rgx = /^\s*(\/\/\/ <reference)/gm;
            // Start search at the first statement. (`/// <reference>` before that is OK.)
            rgx.lastIndex = (_b = (_a = source.ast.body[0].range) === null || _a === void 0 ? void 0 : _a[0]) !== null && _b !== void 0 ? _b : 0;
            // eslint-disable-next-line no-constant-condition
            while (true) {
                const match = rgx.exec(source.text);
                if (match === null) {
                    break;
                }
                const length = match[1].length;
                const start = match.index + match[0].length - length;
                context.report({
                    messageId: "referenceAtTop",
                    loc: source.getLocFromIndex(start),
                });
            }
        }
        return {};
    },
});
module.exports = rule;
//# sourceMappingURL=no-dead-reference.js.map