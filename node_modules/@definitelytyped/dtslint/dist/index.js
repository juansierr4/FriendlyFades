#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assertPackageIsNotDeprecated = void 0;
const header_parser_1 = require("@definitelytyped/header-parser");
const typescript_versions_1 = require("@definitelytyped/typescript-versions");
const assert = require("assert");
const fs_extra_1 = require("fs-extra");
const path_1 = require("path");
const utils_1 = require("@definitelytyped/utils");
const checks_1 = require("./checks");
const lint_1 = require("./lint");
const util_1 = require("./util");
async function main() {
    const args = process.argv.slice(2);
    let dirPath = process.cwd();
    let onlyTestTsNext = false;
    let expectOnly = false;
    let shouldListen = false;
    let lookingForTsLocal = false;
    let tsLocal;
    console.log(`dtslint@${require("../package.json").version}`);
    for (const arg of args) {
        if (lookingForTsLocal) {
            if (arg.startsWith("--")) {
                throw new Error("Looking for local path for TS, but got " + arg);
            }
            tsLocal = (0, path_1.resolve)(arg);
            lookingForTsLocal = false;
            continue;
        }
        switch (arg) {
            case "--installAll":
                console.log("Cleaning old installs and installing for all TypeScript versions...");
                console.log("Working...");
                await (0, utils_1.cleanTypeScriptInstalls)();
                await (0, utils_1.installAllTypeScriptVersions)();
                return;
            case "--localTs":
                lookingForTsLocal = true;
                break;
            case "--version":
                console.log(require("../../package.json").version);
                return;
            case "--expectOnly":
                expectOnly = true;
                break;
            case "--onlyTestTsNext":
                onlyTestTsNext = true;
                break;
            // Only for use by types-publisher.
            // Listens for { path, onlyTestTsNext } messages and ouputs { path, status }.
            case "--listen":
                shouldListen = true;
                break;
            default: {
                if (arg.startsWith("--")) {
                    console.error(`Unknown option '${arg}'`);
                    usage();
                    process.exit(1);
                }
                const path = arg.indexOf("@") === 0 && arg.indexOf("/") !== -1
                    ? // we have a scoped module, e.g. @bla/foo
                        // which should be converted to   bla__foo
                        arg.substr(1).replace("/", "__")
                    : arg;
                dirPath = (0, path_1.join)(dirPath, path);
            }
        }
    }
    if (lookingForTsLocal) {
        throw new Error("Path for --localTs was not provided.");
    }
    if (shouldListen) {
        listen(dirPath, tsLocal, onlyTestTsNext);
    }
    else {
        await installTypeScriptAsNeeded(tsLocal, onlyTestTsNext);
        await runTests(dirPath, onlyTestTsNext, expectOnly, tsLocal);
    }
}
async function installTypeScriptAsNeeded(tsLocal, onlyTestTsNext) {
    if (tsLocal)
        return;
    if (onlyTestTsNext) {
        return (0, utils_1.installTypeScriptNext)();
    }
    return (0, utils_1.installAllTypeScriptVersions)();
}
function usage() {
    console.error("Usage: dtslint [--version] [--installAll] [--onlyTestTsNext] [--expectOnly] [--localTs path]");
    console.error("Args:");
    console.error("  --version        Print version and exit.");
    console.error("  --installAll     Cleans and installs all TypeScript versions.");
    console.error("  --expectOnly     Run only the ExpectType lint rule.");
    console.error("  --onlyTestTsNext Only run with `typescript@next`, not with the minimum version.");
    console.error("  --localTs path   Run with *path* as the latest version of TS.");
    console.error("");
    console.error("onlyTestTsNext and localTs are (1) mutually exclusive and (2) test a single version of TS");
}
function listen(dirPath, tsLocal, alwaysOnlyTestTsNext) {
    // Don't await this here to ensure that messages sent during installation aren't dropped.
    const installationPromise = installTypeScriptAsNeeded(tsLocal, alwaysOnlyTestTsNext);
    process.on("message", async (message) => {
        const { path, onlyTestTsNext, expectOnly } = message;
        await installationPromise;
        runTests((0, path_1.join)(dirPath, path), onlyTestTsNext, !!expectOnly, tsLocal)
            .catch((e) => e.stack)
            .then((maybeError) => {
            process.send({ path, status: maybeError === undefined ? "OK" : maybeError });
        })
            .catch((e) => console.error(e.stack));
    });
}
async function runTests(dirPath, onlyTestTsNext, expectOnly, tsLocal) {
    const isOlderVersion = /^v(0\.)?\d+$/.test((0, path_1.basename)(dirPath));
    const indexText = await (0, fs_extra_1.readFile)((0, path_1.join)(dirPath, "index.d.ts"), "utf-8");
    // If this *is* on DefinitelyTyped, types-publisher will fail if it can't parse the header.
    const dt = indexText.includes("// Type definitions for");
    if (dt) {
        // Someone may have copied text from DefinitelyTyped to their type definition and included a header,
        // so assert that we're really on DefinitelyTyped.
        const dtRoot = findDTRoot(dirPath);
        const packageName = (0, path_1.basename)(dirPath);
        assertPathIsInDefinitelyTyped(dirPath, dtRoot);
        assertPathIsNotBanned(packageName);
        assertPackageIsNotDeprecated(packageName, await (0, fs_extra_1.readFile)((0, path_1.join)(dtRoot, "notNeededPackages.json"), "utf-8"));
    }
    const typesVersions = await (0, util_1.mapDefinedAsync)(await (0, fs_extra_1.readdir)(dirPath), async (name) => {
        if (name === "tsconfig.json" || name === "tslint.json" || name === "tsutils") {
            return undefined;
        }
        const version = (0, util_1.withoutPrefix)(name, "ts");
        if (version === undefined || !(await (0, fs_extra_1.stat)((0, path_1.join)(dirPath, name))).isDirectory()) {
            return undefined;
        }
        if (!typescript_versions_1.TypeScriptVersion.isTypeScriptVersion(version)) {
            throw new Error(`There is an entry named ${name}, but ${version} is not a valid TypeScript version.`);
        }
        if (!typescript_versions_1.TypeScriptVersion.isRedirectable(version)) {
            throw new Error(`At ${dirPath}/${name}: TypeScript version directories only available starting with ts3.1.`);
        }
        return version;
    });
    if (dt) {
        await (0, checks_1.checkPackageJson)(dirPath, typesVersions);
    }
    const minVersion = maxVersion(getMinimumTypeScriptVersionFromComment(indexText), typescript_versions_1.TypeScriptVersion.lowest);
    if (onlyTestTsNext || tsLocal) {
        const tsVersion = tsLocal ? "local" : typescript_versions_1.TypeScriptVersion.latest;
        await testTypesVersion(dirPath, tsVersion, tsVersion, isOlderVersion, dt, expectOnly, tsLocal, /*isLatest*/ true);
    }
    else {
        // For example, typesVersions of [3.2, 3.5, 3.6] will have
        // associated ts3.2, ts3.5, ts3.6 directories, for
        // <=3.2, <=3.5, <=3.6 respectively; the root level is for 3.7 and above.
        // so this code needs to generate ranges [lowest-3.2, 3.3-3.5, 3.6-3.6, 3.7-latest]
        const lows = [typescript_versions_1.TypeScriptVersion.lowest, ...typesVersions.map(next)];
        const his = [...typesVersions, typescript_versions_1.TypeScriptVersion.latest];
        assert.strictEqual(lows.length, his.length);
        for (let i = 0; i < lows.length; i++) {
            const low = maxVersion(minVersion, lows[i]);
            const hi = his[i];
            assert(parseFloat(hi) >= parseFloat(low), `'// Minimum TypeScript Version: ${minVersion}' in header skips ts${hi} folder.`);
            const isLatest = hi === typescript_versions_1.TypeScriptVersion.latest;
            const versionPath = isLatest ? dirPath : (0, path_1.join)(dirPath, `ts${hi}`);
            if (lows.length > 1) {
                console.log("testing from", low, "to", hi, "in", versionPath);
            }
            await testTypesVersion(versionPath, low, hi, isOlderVersion, dt, expectOnly, undefined, isLatest);
        }
    }
}
function maxVersion(v1, v2) {
    if (!v1)
        return v2;
    if (!v2)
        return v1;
    if (parseFloat(v1) >= parseFloat(v2))
        return v1;
    return v2;
}
function next(v) {
    const index = typescript_versions_1.TypeScriptVersion.supported.indexOf(v);
    assert.notStrictEqual(index, -1);
    assert(index < typescript_versions_1.TypeScriptVersion.supported.length);
    return typescript_versions_1.TypeScriptVersion.supported[index + 1];
}
async function testTypesVersion(dirPath, lowVersion, hiVersion, isOlderVersion, dt, expectOnly, tsLocal, isLatest) {
    await (0, lint_1.checkTslintJson)(dirPath, dt);
    (0, checks_1.checkTsconfig)(await (0, util_1.getCompilerOptions)(dirPath), dt ? { relativeBaseUrl: ".." + (isOlderVersion ? "/.." : "") + (isLatest ? "" : "/..") + "/" } : undefined);
    const err = await (0, lint_1.lint)(dirPath, lowVersion, hiVersion, isLatest, expectOnly, tsLocal);
    if (err) {
        throw new Error(err);
    }
}
function findDTRoot(dirPath) {
    let path = dirPath;
    while ((0, path_1.basename)(path) !== "types" && (0, path_1.dirname)(path) !== "." && (0, path_1.dirname)(path) !== "/") {
        path = (0, path_1.dirname)(path);
    }
    return (0, path_1.dirname)(path);
}
function assertPathIsInDefinitelyTyped(dirPath, dtRoot) {
    // TODO: It's not clear whether this assertion makes sense, and it's broken on Azure Pipelines (perhaps because DT isn't cloned into DefinitelyTyped)
    // Re-enable it later if it makes sense.
    // if (basename(dtRoot) !== "DefinitelyTyped")) {
    if (!(0, fs_extra_1.existsSync)((0, path_1.join)(dtRoot, "types"))) {
        throw new Error("Since this type definition includes a header (a comment starting with `// Type definitions for`), " +
            "assumed this was a DefinitelyTyped package.\n" +
            "But it is not in a `DefinitelyTyped/types/xxx` directory: " +
            dirPath);
    }
}
/**
 * Starting at some point in time, npm has banned all new packages whose names
 * contain the word `download`. However, some older packages exist that still
 * contain this name.
 * @NOTE for contributors: The list of literal exceptions below should ONLY be
 * extended with packages for which there already exists a corresponding type
 * definition package in the `@types` scope. More information:
 * https://github.com/microsoft/DefinitelyTyped-tools/pull/381.
 */
function assertPathIsNotBanned(packageName) {
    if (/(^|\W)download($|\W)/.test(packageName) &&
        packageName !== "download" &&
        packageName !== "downloadjs" &&
        packageName !== "s3-download-stream") {
        // Since npm won't release their banned-words list, we'll have to manually add to this list.
        throw new Error(`${packageName}: Contains the word 'download', which is banned by npm.`);
    }
}
function assertPackageIsNotDeprecated(packageName, notNeededPackages) {
    const unneeded = JSON.parse(notNeededPackages).packages;
    if (Object.keys(unneeded).includes(packageName)) {
        throw new Error(`${packageName}: notNeededPackages.json has an entry for ${packageName}.
That means ${packageName} ships its own types, and @types/${packageName} was deprecated and removed from Definitely Typed.
If you want to re-add @types/${packageName}, please remove its entry from notNeededPackages.json.`);
    }
}
exports.assertPackageIsNotDeprecated = assertPackageIsNotDeprecated;
function getMinimumTypeScriptVersionFromComment(text) {
    const match = text.match(/\/\/ (?:Minimum )?TypeScript Version: /);
    if (!match) {
        return undefined;
    }
    let line = text.slice(match.index, text.indexOf("\n", match.index));
    if (line.endsWith("\r")) {
        line = line.slice(0, line.length - 1);
    }
    return (0, header_parser_1.parseTypeScriptVersionLine)(line);
}
if (!module.parent) {
    main().catch((err) => {
        console.error(err.stack);
        process.exit(1);
    });
}
//# sourceMappingURL=index.js.map